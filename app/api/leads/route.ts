//api/leads/route.ts
import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { sendMail } from "@/lib/mailer";

export async function POST(req: Request) {
  try {
    const body = await req.json();
    const name = String(body.name || "").trim();
    const email = String(body.email || "").trim();
    const phone = String(body.phone || "").trim();
    const source = String(body.source || "Landing page English Lab");

    // validation
    const emailOk = email.includes("@") && email.includes(".");
    if (!name || !emailOk) {
      return NextResponse.json(
        { ok: false, error: "INVALID_INPUT" },
        { status: 400 }
      );
    }

    // save lead
    const lead = await prisma.lead.create({
      data: { name, email, phone, source },
    });

    // prepare email content
    const subject = "C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t∆∞ v·∫•n t·∫°i English Lab!";
    const html = `
  <p>Xin ch√†o <strong>${name}</strong>,</p>
  <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t∆∞ v·∫•n mi·ªÖn ph√≠ t·∫°i <strong>English Lab</strong>. Ch√∫ng t√¥i s·∫Ω li√™n h·ªá b·∫°n trong th·ªùi gian s·ªõm nh·∫•t ƒë·ªÉ h·ªó tr·ª£ v√† t∆∞ v·∫•n l·ªô tr√¨nh h·ªçc ph√π h·ª£p.</p>
  
  <p><strong>Th√¥ng tin b·∫°n ƒë√£ cung c·∫•p:</strong></p>
  <ul>
    <li>Email: ${email}</li>
    ${phone ? `<li>ƒêi·ªán tho·∫°i: ${phone}</li>` : ""}
    <li>Ngu·ªìn: ${source}</li>
  </ul>
  
  <p>Ch√∫ng t√¥i xin ƒë∆∞·ª£c g·ª≠i t·∫∑ng b·∫°n m·ªôt s·ªë t√†i li·ªáu ti·∫øng Anh nh∆∞ m·ªôt l·ªùi c·∫£m ∆°n v√¨ s·ª± quan t√¢m c·ªßa b·∫°n ƒë·∫øn n·ªÅn t·∫£ng c·ªßa ch√∫ng t√¥i.</p>
  
  <p style="text-align:center; margin:20px 0;">
    <a href="https://drive.google.com/drive/folders/1LiaT1n7tQX1WkDYSAW09wpfzCDOy35os?usp=sharing"
       style="display:inline-block; background-color:#2563eb; color:#ffffff; 
              padding:12px 24px; border-radius:8px; text-decoration:none; 
              font-weight:bold; font-size:16px;">
      üì• T·∫£i t√†i li·ªáu
    </a>
  </p>
  
  <p>N·∫øu c√≥ th·∫Øc m·∫Øc ho·∫∑c c·∫ßn h·ªó tr·ª£ ngay, b·∫°n c√≥ th·ªÉ li√™n h·ªá v·ªõi ch√∫ng t√¥i qua email 
     <a href="mailto:ndangkhoa567@gmail.com">ndangkhoa567@gmail.com</a> ho·∫∑c s·ªë hotline <strong>0914 932 098</strong>.</p>
  
  <p>Tr√¢n tr·ªçng,<br/><strong>English Lab Team</strong></p>
`;

    const text = `
  C·∫£m ∆°n ${name} ƒë√£ ƒëƒÉng k√Ω t∆∞ v·∫•n t·∫°i English Lab.
  Th√¥ng tin b·∫°n cung c·∫•p:
  - Email: ${email}
  ${phone ? `- ƒêi·ªán tho·∫°i: ${phone}` : ""}
  - Ngu·ªìn: ${source}

  Ch√∫ng t√¥i s·∫Ω li√™n h·ªá b·∫°n s·ªõm. M·ªçi th·∫Øc m·∫Øc vui l√≤ng li√™n h·ªá ndangkhoa567@gmail.com
  `;

    // send email (try/catch so sending failure doesn't break lead creation)
    try {
      const { info, preview } = await sendMail({
        to: email,
        subject,
        html,
        text: `C·∫£m ∆°n ${name}`,
      });
      console.log("Lead email sent:", info?.messageId, "preview:", preview);
    } catch (mailErr) {
      console.error("Failed to send lead email:", mailErr);
      // don't return error to client; lead was saved
    }

    // record event optionally
    await prisma.event.create({
      data: { event: "lead_created", page: source, meta: { email, phone } },
    });

    return NextResponse.json({ ok: true, data: lead }, { status: 201 });
  } catch (e) {
    console.error("POST /api/leads error", e);
    return NextResponse.json(
      { ok: false, error: "SERVER_ERROR" },
      { status: 500 }
    );
  }
}
